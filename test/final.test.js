const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
const web3 = new Web3(ganache.provider());



let accounts;
let factory;
let campaignAddress;
let campaign;

beforeEach(async () =>{
    accounts = await web3.eth.getAccounts();

    factory = await new web3.eth.Contract([{"constant":false,"inputs":[{"internalType":"uint256","name":"minimum","type":"uint256"}],"name":"createCampaign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"deployedCampaigns","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getDeployedCamapigns","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}])
        .deploy({data : '60806040523480156100115760006000fd5b50610017565b610fa3806100266000396000f3fe60806040523480156100115760006000fd5b50600436106100465760003560e01c8063339d50a51461004c578063a3303a75146100bb578063d4933ea2146100ea57610046565b60006000fd5b610079600480360360208110156100635760006000fd5b810190808035906020019092919050505061014a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100e8600480360360208110156100d25760006000fd5b810190808035906020019092919050505061018f565b005b6100f261026c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101365780820151818401525b60208101905061011a565b505050509050019250505060405180910390f35b60006000508181548110151561015c57fe5b906000526020600020900160005b9150909054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000813360405161019f90610302565b808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050604051809103906000f0801580156101f9573d600060003e3d6000fd5b50905060006000508190806001815401808255809150509060018203906000526020600020900160005b909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b50565b606060006000508054806020026020016040519081016040528092919081815260200182805480156102f357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102a9575b505050505090506102ff565b90565b610c5f806103108339019056fe60806040523480156100115760006000fd5b50604051610c5f380380610c5f833981810160405260408110156100355760006000fd5b8101908080519060200190929190805190602001909291905050505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160026000508190909055505b50506100a6565b610baa806100b56000396000f3fe60806040526004361061008a5760003560e01c806382fde0931161005957806382fde093146102935780638a9cfd55146102bf578063937e09b1146103ba578063d7bb99ba146103e6578063d7d1bbdb146103f05761008a565b806303441006146100905780630a144391146100cd578063481c6a751461013857806381d12c58146101905761008a565b60006000fd5b34801561009d5760006000fd5b506100cb600480360360208110156100b55760006000fd5b810190808035906020019092919050505061042d565b005b3480156100da5760006000fd5b5061011e600480360360208110156100f25760006000fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610594565b604051808215151515815260200191505060405180910390f35b3480156101455760006000fd5b5061014e6105b9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019d5760006000fd5b506101cb600480360360208110156101b55760006000fd5b81019080803590602001909291905050506105df565b60405180806020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184151515158152602001838152602001828103825287818151815260200191508051906020019080838360005b838110156102545780820151818401525b602081019050610238565b50505050905090810190601f1680156102815780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156102a05760006000fd5b506102a96106f6565b6040518082815260200191505060405180910390f35b3480156102cc5760006000fd5b506103b8600480360360608110156102e45760006000fd5b81019080803590602001906401000000008111156103025760006000fd5b8201836020820111156103155760006000fd5b803590602001918460018302840111640100000000831117156103385760006000fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090909192909091929080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ff565b005b3480156103c75760006000fd5b506103d061088c565b6040518082815260200191505060405180910390f35b6103ee610895565b005b3480156103fd5760006000fd5b5061042b600480360360208110156104155760006000fd5b810190808035906020019092919050505061091e565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561048a5760006000fd5b600060006000508281548110151561049e57fe5b906000526020600020906005020160005b50905060026004600050548115156104c357fe5b0481600301600050541115156104d95760006000fd5b8060020160149054906101000a900460ff161515156104f85760006000fd5b60008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc83600101600050549081150290604051600060405180830381858888f1935050505015801561056f573d600060003e3d6000fd5b5060018260020160146101000a81548160ff02191690831515021790555050505b5b50565b600360005060205280600052604060002060009150909054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600050818154811015156105f157fe5b906000526020600020906005020160005b91509050806000016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050505050908060010160005054908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060030160005054905085565b60046000505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561075c5760006000fd5b610764610a7b565b6040518060a001604052808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000815260200150905060006000508190806001815401808255809150509060018203906000526020600020906005020160005b909192909190915060008201518160000160005090805190602001906107fb929190610ac5565b5060208201518160010160005090905560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908315150217905550608082015181600301600050909055505050505b5b505050565b60026000505481565b60026000505434101515156108aa5760006000fd5b6001600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600460008181505480929190600101919050909055505b565b600060006000508281548110151561093257fe5b906000526020600020906005020160005b509050600360005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156109a25760006000fd5b8060040160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610a015760006000fd5b60018160040160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550806003016000818150548092919060010191905090905550505b50565b6040518060a001604052806060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020015090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b0657805160ff1916838001178555610b39565b82800160010185558215610b39579182015b82811115610b385782518260005090905591602001919060010190610b18565b5b509050610b469190610b4a565b5090565b610b729190610b54565b80821115610b6e5760008181506000905550600101610b54565b5090565b9056fea265627a7a72315820db0008305041b52c708e23f13a1724f3320d0cd40b9a14040d2ba4206bf091b964736f6c63430005110032a265627a7a7231582025833d421accdc1619ec831f7b9aa88397cafaa204d5271f44908679763cdce164736f6c63430005110032'})
        .send({from : accounts[0], gas : '1000000'});

    await factory.methods.createCampaign('100').send({
        from : accounts[0], gas : '1000000'
    });

    [campaignAddress] = await factory.methods.getDeployedCamapigns().call();
    campaign = await new web3.eth.Contract([{"inputs":[{"internalType":"uint256","name":"minimum","type":"uint256"},{"internalType":"address","name":"creator","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"approveRequest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"approvers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"approversCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"contribute","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"createRequest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"finalizeRequest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"manager","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"minimumContribution","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"requests","outputs":[{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"complete","type":"bool"},{"internalType":"uint256","name":"approvalCount","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}], campaignAddress);

});

describe('Campaigns', () =>{
    it('deploys contract', () =>{
        assert.ok(factory.options.address);
        assert.ok(campaign.options.address);
    });

    it('marks caller as manager', async () =>{
        const manager = await campaign.methods.manager().call();
        assert.equal(accounts[0],manager);
    });

    it('contribute money and approve as approvers', async () =>{
        await campaign.methods.contribute().send({
            value : '200',
            from : accounts[1]
        });

        const isContributer = await campaign.methods.approvers(accounts[1]).call();
        assert(isContributer);
    });

    it('require min contri',async () =>{
        try{
            await campaign.methods.contribute().send({
                value : '5', from : accounts[1]
            });
            assert(false);
        }catch(err){
            assert(err);
        }
    });

    it('allows to make request', async () =>{
        await campaign.methods.createRequest('Buy Frames', '100', accounts[1]).send({
            from : accounts[0], gas : '1000000'
        });

        const req = await campaign.methods.requests(0).call();
        assert.equal('Buy Frames', req.description);
    });

    it('process request', async () =>{
        await campaign.methods.contribute().send({
            from : accounts[0],
            value : web3.utils.toWei('10', 'ether')
        });
        await campaign.methods.createRequest('Buy Battery', web3.utils.toWei('5','ether'), accounts[1]).send({
            from : accounts[0], gas : '1000000'
        });
        await campaign.methods.approveRequest(0).send({
            from : accounts[0], gas : '1000000'
        });
        await campaign.methods.finalizeRequest(0).send({
            from : accounts[0], gas : '1000000'
        });
        let balance = await web3.eth.getBalance(accounts[1]);
        balance = web3.utils.fromWei(balance, 'ether');
        balance = parseFloat(balance);
        console.log(balance);
        assert(balance > 104);
    });
});